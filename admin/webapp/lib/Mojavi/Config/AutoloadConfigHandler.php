<?php
/**
 * AutoloadConfigHandler allows you to specify a list of classes that will
 * automatically be included for you upon first use.
 *
 * @package	Mojavi
 * @subpackage Config
 */
namespace Mojavi\Config;

use Mojavi\Exception\ParseException as ParseException;
use Exception;

class AutoloadConfigHandler extends IniConfigHandler
{

	// +-----------------------------------------------------------------------+
	// | METHODS															   |
	// +-----------------------------------------------------------------------+

	/**
	 * Execute this configuration handler.
	 *
	 * @param string An absolute filesystem path to a configuration file.
	 *
	 * @return string Data to be written to a cache file.
	 *
	 * @throws <b>ConfigurationException</b> If a requested configuration file
	 *									   does not exist or is not readable.
	 * @throws <b>ParseException</b> If a requested configuration file is
	 *							   improperly formatted.
	 */
	public function & execute ($config)
	{

		// set our required categories list and initialize our handler
		$categories = array('required_categories' => array('autoload'));

		$this->initialize($categories);

		// parse the ini
		$ini = $this->parseIni($config);

		// init our data array
		$data = array();

		// let's do our fancy work
		foreach ($ini['autoload'] as $class => &$file)
		{
			$file = $this->replaceConstants($file);
			$file = $this->replacePath($file);
	
			if (!is_readable($file) && !is_dir($file)) {
				if (substr($file, -1) != "/" && substr($file, -1) != "\\") { // Check that it's not a folder path that is empty
				
					// the class path doesn't exist
					$error = 'Configuration file "%s" specifies class "%s" with ' .
							 'nonexistent or unreadable file "%s"';
					$error = sprintf($error, $config, $class, $file);
	
					throw new ParseException($error);
				}

			}

			if (is_dir($file)) {
				if (($dh = opendir($file)) !== false) {
					while (($fh = readdir($dh)) !== false) {
						
						if (preg_match('/^\./',$fh) == 0) {
							$tmp	= "\$classes['%s'] = '%s';";
							$filename = $file . $fh;
							if (is_readable($filename) && !is_dir($filename)) {
								#remove normal suffices
								$fh_class = preg_replace('/\.class\.php/',"",$fh);
								
								if (strpos($class, 'MOJAVI') === false) {
									$data[] = sprintf($tmp, $class . '_' . $fh_class, $filename);
								} else {
									$data[] = sprintf($tmp, $fh_class, $filename);
								}
							}
						}
					}
					closedir($dh);
				}
			} else if (is_readable($file)) {
				$tmp	= "\$classes['%s'] = '%s';";
				$fh_class = preg_replace('/\.class\.php/',"",basename($file));
				$data[] = sprintf($tmp, $fh_class, $file);
			} else {
				$tmp	= "// \$classes['%s'] = '%s';";
				$data[] = sprintf($tmp, $class, $file);
			}

		}

		// compile data
		$retval = "<?php\n" .
				  "// auth-generated by AutoloadConfigHandler\n" .
				  "// date: %s\n%s\n?>";
		$retval = sprintf($retval, date('m/d/Y H:i:s'), implode("\n", $data));

		return $retval;

	}

}

