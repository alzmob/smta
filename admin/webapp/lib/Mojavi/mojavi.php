<?php
namespace Mojavi;

use Mojavi\Config\ConfigCache;
use Mojavi\Exception\MojaviException;
use Mojavi\Exception\AutoloadException;
use Exception;

/**
 * Pre-initialization script.
 *
 * @package Mojavi
 */
/**
 * Handles autoloading of classes that have been specified in autoload.ini.
 *
 * @param string A class name.
 *
 * @return void
 */
function __autoload ($class)
{
	// this static variable is generated by the $config file below
	static $classes;

	if (!isset($classes))
	{
		try
		{
			// include the list of autoload classes
			$config = ConfigCache::checkConfig('config/autoload.ini');
			require_once($config);
		} catch (MojaviException $e)
		{
			$e->printStackTrace();
		} catch (Exception $e)
		{
			// unknown exception
			$e = new MojaviException($e->getMessage());
			$e->printStackTrace();
		}

	}

	if (isset($classes[$class])) {
//		 error_log("Autoloading from autoload.ini (" . number_format(memory_get_usage(true), 0, null, ',') . "): " . $class);
		// class exists, let's include it
		require_once($classes[$class]);
	} else {
//		 error_log("Autoloading from namespace (" . number_format(memory_get_usage(true), 0, null, ',') . "): " . $class);
		$className = ltrim($class, '\\');
		$fileName  = '';
		$namespace = '';
		if (($lastNsPos = strripos($className, '\\')) !== false) {
			$namespace = substr($className, 0, $lastNsPos);
			$className = substr($className, $lastNsPos + 1);
			$fileName  = str_replace('\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
		}

		$fileName .= str_replace('_', DIRECTORY_SEPARATOR, $className);
		if (file_exists(MO_LIB_DIR . DIRECTORY_SEPARATOR . $fileName . '.php')) {
			require_once($fileName . '.php');
		} else {
			// Split the class by underscores and look for it
			$class_file = str_replace('_', DIRECTORY_SEPARATOR, $class);
			if (file_exists(MO_LIB_DIR . DIRECTORY_SEPARATOR . $class_file . '.php')) {
//				 error_log("Autoloading from underscores (" . number_format(memory_get_usage(true), 0, null, ',') . "): " . $class);
				require_once(MO_LIB_DIR . DIRECTORY_SEPARATOR . $class_file . '.php');
			} else if (false) {				
				
				// Destroy the session completely
				session_destroy();

				// unspecified class
				$error = 'Autoloading of class "%s" failed';
				$error = sprintf($error, $class);
				$e = new AutoloadException($error);
				$e->printStackTrace();

				// Clear the cache
				/* Clearing the cache here can cause a bunch of bus errors in apache, so we don't do it anymore */
				// ConfigCache::clear();

				if (in_array(session_name(), $_COOKIE)) {
					if (file_exists("/tmp/sess_" . $_COOKIE[session_name()])) {
						try {
							unlink("/tmp/sess_" . $_COOKIE[session_name()]);
						} catch (Exception $e) {
							$e = new \Mojavi\Exception\MojaviException($e->getMessage());
							$e->printStackTrace("");
						}
					}
				}
			}
		}
	}


}

try
{

	error_reporting(E_ALL | E_STRICT);

	// ini settings
	ini_set('arg_separator.output',	  '&amp;');
	ini_set('display_errors',			1);
	ini_set('magic_quotes_runtime',	  0);
	ini_set('unserialize_callback_func', '__autoload');

	// define a few filesystem paths
	define('MO_CONFIG_DIR',   MO_WEBAPP_DIR . '/config');
	define('MO_LIB_DIR',	  MO_WEBAPP_DIR . '/lib');
	define('MO_MODULE_DIR',   MO_WEBAPP_DIR . '/modules');
	define('MO_TEMPLATE_DIR', MO_WEBAPP_DIR . '/templates');
	
	// Try the composer autoloader
	//require_once(MO_WEBAPP_DIR . '/vendor/autoload.php');
	
	spl_autoload_register(function($className) {
		__autoload($className);
	});

	// required files
	require_once(MO_APP_DIR . '/version.php');

	// required classes for this file and ConfigCache to run
	require_once(MO_APP_DIR . '/Core/MojaviObject.php');
	require_once(MO_APP_DIR . '/Error/Errors.php');
	require_once(MO_APP_DIR . '/Util/ParameterHolder.php');
	require_once(MO_APP_DIR . '/Config/ConfigCache.php');
	require_once(MO_APP_DIR . '/Config/ConfigHandler.php');
	require_once(MO_APP_DIR . '/Config/ParameterParser.php');
	require_once(MO_APP_DIR . '/Config/IniConfigHandler.php');
	require_once(MO_APP_DIR . '/Config/AutoloadConfigHandler.php');
	require_once(MO_APP_DIR . '/Config/LoggingConfigHandler.php');
	require_once(MO_APP_DIR . '/Config/RootConfigHandler.php');
	require_once(MO_APP_DIR . '/Exception/MojaviException.php');
	require_once(MO_APP_DIR . '/Exception/AutoloadException.php');
	require_once(MO_APP_DIR . '/Exception/CacheException.php');
	require_once(MO_APP_DIR . '/Exception/ConfigurationException.php');
	require_once(MO_APP_DIR . '/Exception/ParseException.php');
	require_once(MO_APP_DIR . '/Util/Toolkit.php');

	// clear our cache if the conditions are right
	if (MO_DEBUG)
	{
		error_log("================================ Clearing Cache ====================================");
		ConfigCache::clear();

	}

	// load base settings
	ConfigCache::import('config/settings.ini');

	// required classes for the framework
	ConfigCache::import('config/compile.conf');

} catch (MojaviException $e)
{

	$e->printStackTrace();

} catch (Exception $e)
{

	// unknown exception
	$e = new MojaviException($e->getMessage());

	$e->printStackTrace();

}
